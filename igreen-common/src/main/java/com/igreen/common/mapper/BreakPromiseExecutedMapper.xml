<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.igreen.common.dao.BreakPromiseExecutedMapper" >
  <resultMap id="BaseResultMap" type="com.igreen.common.model.BreakPromiseExecuted" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="regist_item_id" property="registItemId" jdbcType="INTEGER" />
    <result column="case_filing_time" property="caseFilingTime" jdbcType="VARCHAR" />
    <result column="legal_person" property="legalPerson" jdbcType="VARCHAR" />
    <result column="organization_no" property="organizationNo" jdbcType="VARCHAR" />
    <result column="obligation" property="obligation" jdbcType="VARCHAR" />
    <result column="executed_condition" property="executedCondition" jdbcType="VARCHAR" />
    <result column="perform_condition" property="performCondition" jdbcType="VARCHAR" />
    <result column="nonperforming" property="nonperforming" jdbcType="VARCHAR" />
    <result column="publish_time" property="publishTime" jdbcType="VARCHAR" />
    <result column="province" property="province" jdbcType="VARCHAR" />
    <result column="according_no" property="accordingNo" jdbcType="VARCHAR" />
    <result column="execute_court" property="executeCourt" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="creater" property="creater" jdbcType="INTEGER" />
    <result column="created_time" property="createdTime" jdbcType="DATE" />
    <result column="updater" property="updater" jdbcType="INTEGER" />
    <result column="updated_time" property="updatedTime" jdbcType="DATE" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, regist_item_id, case_filing_time, legal_person, organization_no, obligation, 
    executed_condition, perform_condition, nonperforming, publish_time, province, according_no, 
    execute_court, status, creater, created_time, updater, updated_time, remark
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from break_promise_executed
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="selectByRegistItemId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from break_promise_executed
    where regist_item_id = #{registItemId,jdbcType=INTEGER}
  </select>
  
  <!-- 查询有效的总记录数 -->
  <select id="countBreakPromiseExecuted" resultType="java.lang.Integer" parameterType="map">
  	select count(1)
  	from break_promise_executed
  	where 1 = 1
  	<if test="registItemId != null" >
  		and regist_item_id = #{registItemId,jdbcType=INTEGER}
  	</if>
  	<if test="legalPerson != null" >
  		and legal_person like concat(concat('%',#{legalPerson,jdbcType=VARCHAR}),'%')
  	</if>
  	<if test="organizationNo != null" >
  		and organization_no like concat(concat('%',#{organizationNo,jdbcType=VARCHAR}),'%')
  	</if>
  	<if test="accordingNo != null" >
  		and according_no like concat(concat('%',#{accordingNo,jdbcType=VARCHAR}),'%')
  	</if>
  	<if test="executeCourt != null" >
  		and execute_court like concat(concat('%',#{executeCourt,jdbcType=VARCHAR}),'%')
  	</if>
  	<if test="status != null" >
  		and status = #{status,jdbcType=INTEGER}
  	</if>
  </select>
  
  <select id="pageBreakPromiseExecuted" resultMap="BaseResultMap" parameterType="map" >
  	select 
  	<include refid="Base_Column_List" />
  	from break_promise_executed
  	where 1 = 1
  	<if test="registItemId != null" >
  		and regist_item_id = #{registItemId,jdbcType=INTEGER}
  	</if>
  	<if test="legalPerson != null" >
  		and legal_person like concat(concat('%',#{legalPerson,jdbcType=VARCHAR}),'%')
  	</if>
  	<if test="organizationNo != null" >
  		and organization_no like concat(concat('%',#{organizationNo,jdbcType=VARCHAR}),'%')
  	</if>
  	<if test="accordingNo != null" >
  		and according_no like concat(concat('%',#{accordingNo,jdbcType=VARCHAR}),'%')
  	</if>
  	<if test="executeCourt != null" >
  		and execute_court like concat(concat('%',#{executeCourt,jdbcType=VARCHAR}),'%')
  	</if>
  	<if test="status != null" >
  		and status = #{status,jdbcType=INTEGER}
  	</if>
  	limit #{startRow},#{pageRows}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from break_promise_executed
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteByRegistItemId" parameterType="java.lang.Integer" >
    delete from break_promise_executed
    where regist_item_id = #{registItemId,jdbcType=INTEGER}
  </delete>
  
  <insert id="insert" parameterType="com.igreen.common.model.BreakPromiseExecuted" >
    insert into break_promise_executed (id, regist_item_id, case_filing_time, 
      legal_person, organization_no, obligation, 
      executed_condition, perform_condition, nonperforming, 
      publish_time, province, according_no, 
      execute_court, status, creater, 
      created_time, updater, updated_time, 
      remark)
    values (#{id,jdbcType=INTEGER}, #{registItemId,jdbcType=INTEGER}, #{caseFilingTime,jdbcType=VARCHAR}, 
      #{legalPerson,jdbcType=VARCHAR}, #{organizationNo,jdbcType=VARCHAR}, #{obligation,jdbcType=VARCHAR}, 
      #{executedCondition,jdbcType=VARCHAR}, #{performCondition,jdbcType=VARCHAR}, #{nonperforming,jdbcType=VARCHAR}, 
      #{publishTime,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR}, #{accordingNo,jdbcType=VARCHAR}, 
      #{executeCourt,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{creater,jdbcType=INTEGER}, 
      #{createdTime,jdbcType=DATE}, #{updater,jdbcType=INTEGER}, #{updatedTime,jdbcType=DATE}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  
  <insert id="insertSelective" parameterType="com.igreen.common.model.BreakPromiseExecuted" >
    insert into break_promise_executed
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="registItemId != null" >
        regist_item_id,
      </if>
      <if test="caseFilingTime != null" >
        case_filing_time,
      </if>
      <if test="legalPerson != null" >
        legal_person,
      </if>
      <if test="organizationNo != null" >
        organization_no,
      </if>
      <if test="obligation != null" >
        obligation,
      </if>
      <if test="executedCondition != null" >
        executed_condition,
      </if>
      <if test="performCondition != null" >
        perform_condition,
      </if>
      <if test="nonperforming != null" >
        nonperforming,
      </if>
      <if test="publishTime != null" >
        publish_time,
      </if>
      <if test="province != null" >
        province,
      </if>
      <if test="accordingNo != null" >
        according_no,
      </if>
      <if test="executeCourt != null" >
        execute_court,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="creater != null" >
        creater,
      </if>
      <if test="createdTime != null" >
        created_time,
      </if>
      <if test="updater != null" >
        updater,
      </if>
      <if test="updatedTime != null" >
        updated_time,
      </if>
      <if test="remark != null" >
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="registItemId != null" >
        #{registItemId,jdbcType=INTEGER},
      </if>
      <if test="caseFilingTime != null" >
        #{caseFilingTime,jdbcType=VARCHAR},
      </if>
      <if test="legalPerson != null" >
        #{legalPerson,jdbcType=VARCHAR},
      </if>
      <if test="organizationNo != null" >
        #{organizationNo,jdbcType=VARCHAR},
      </if>
      <if test="obligation != null" >
        #{obligation,jdbcType=VARCHAR},
      </if>
      <if test="executedCondition != null" >
        #{executedCondition,jdbcType=VARCHAR},
      </if>
      <if test="performCondition != null" >
        #{performCondition,jdbcType=VARCHAR},
      </if>
      <if test="nonperforming != null" >
        #{nonperforming,jdbcType=VARCHAR},
      </if>
      <if test="publishTime != null" >
        #{publishTime,jdbcType=VARCHAR},
      </if>
      <if test="province != null" >
        #{province,jdbcType=VARCHAR},
      </if>
      <if test="accordingNo != null" >
        #{accordingNo,jdbcType=VARCHAR},
      </if>
      <if test="executeCourt != null" >
        #{executeCourt,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="creater != null" >
        #{creater,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null" >
        #{createdTime,jdbcType=DATE},
      </if>
      <if test="updater != null" >
        #{updater,jdbcType=INTEGER},
      </if>
      <if test="updatedTime != null" >
        #{updatedTime,jdbcType=DATE},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.igreen.common.model.BreakPromiseExecuted" >
    update break_promise_executed
    <set >
      <if test="registItemId != null" >
        regist_item_id = #{registItemId,jdbcType=INTEGER},
      </if>
      <if test="caseFilingTime != null" >
        case_filing_time = #{caseFilingTime,jdbcType=VARCHAR},
      </if>
      <if test="legalPerson != null" >
        legal_person = #{legalPerson,jdbcType=VARCHAR},
      </if>
      <if test="organizationNo != null" >
        organization_no = #{organizationNo,jdbcType=VARCHAR},
      </if>
      <if test="obligation != null" >
        obligation = #{obligation,jdbcType=VARCHAR},
      </if>
      <if test="executedCondition != null" >
        executed_condition = #{executedCondition,jdbcType=VARCHAR},
      </if>
      <if test="performCondition != null" >
        perform_condition = #{performCondition,jdbcType=VARCHAR},
      </if>
      <if test="nonperforming != null" >
        nonperforming = #{nonperforming,jdbcType=VARCHAR},
      </if>
      <if test="publishTime != null" >
        publish_time = #{publishTime,jdbcType=VARCHAR},
      </if>
      <if test="province != null" >
        province = #{province,jdbcType=VARCHAR},
      </if>
      <if test="accordingNo != null" >
        according_no = #{accordingNo,jdbcType=VARCHAR},
      </if>
      <if test="executeCourt != null" >
        execute_court = #{executeCourt,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="creater != null" >
        creater = #{creater,jdbcType=INTEGER},
      </if>
      <if test="createdTime != null" >
        created_time = #{createdTime,jdbcType=DATE},
      </if>
      <if test="updater != null" >
        updater = #{updater,jdbcType=INTEGER},
      </if>
      <if test="updatedTime != null" >
        updated_time = #{updatedTime,jdbcType=DATE},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.igreen.common.model.BreakPromiseExecuted" >
    update break_promise_executed
    set regist_item_id = #{registItemId,jdbcType=INTEGER},
      case_filing_time = #{caseFilingTime,jdbcType=VARCHAR},
      legal_person = #{legalPerson,jdbcType=VARCHAR},
      organization_no = #{organizationNo,jdbcType=VARCHAR},
      obligation = #{obligation,jdbcType=VARCHAR},
      executed_condition = #{executedCondition,jdbcType=VARCHAR},
      perform_condition = #{performCondition,jdbcType=VARCHAR},
      nonperforming = #{nonperforming,jdbcType=VARCHAR},
      publish_time = #{publishTime,jdbcType=VARCHAR},
      province = #{province,jdbcType=VARCHAR},
      according_no = #{accordingNo,jdbcType=VARCHAR},
      execute_court = #{executeCourt,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      creater = #{creater,jdbcType=INTEGER},
      created_time = #{createdTime,jdbcType=DATE},
      updater = #{updater,jdbcType=INTEGER},
      updated_time = #{updatedTime,jdbcType=DATE},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <delete id="auditByRegistItemId" parameterType="java.lang.Integer" >
    update break_promise_executed
    set status = 1
    where regist_item_id = #{registItemId,jdbcType=INTEGER}
  </delete>
</mapper>